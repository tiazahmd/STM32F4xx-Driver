
STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08000d58  08000d58  00010d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d94  08000d94  00010d9c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d94  08000d94  00010d9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d94  08000d9c  00010d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d94  08000d94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d98  08000d98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000d9c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000d9c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000330f  00000000  00000000  00010dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007eb  00000000  00000000  000140db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  000148c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00014a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000030dc  00000000  00000000  00014b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001de3  00000000  00000000  00017c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bc32  00000000  00000000  00019a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00025661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004fc  00000000  00000000  000256dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d40 	.word	0x08000d40

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000d40 	.word	0x08000d40

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <delay>:
 */

#include <stm32f4xx.h>

void delay(uint32_t del)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < (del * 100000); i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a06      	ldr	r2, [pc, #24]	; (8000218 <delay+0x30>)
 8000200:	fb02 f203 	mul.w	r2, r2, r3
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	429a      	cmp	r2, r3
 8000208:	d8f5      	bhi.n	80001f6 <delay+0xe>
}
 800020a:	bf00      	nop
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	000186a0 	.word	0x000186a0

0800021c <GPIO_PCLKControl>:
 * RETURN			:	NONE
 *
 * NOTE				:	N/A
 ********************************************************************/
void GPIO_PCLKControl(GPIO_RegDef_t * pGPIOx, uint8_t ENorDI)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	70fb      	strb	r3, [r7, #3]
	if (ENorDI == ENABLE) {
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d141      	bne.n	80002b2 <GPIO_PCLKControl+0x96>
		if (pGPIOx == DRV_GPIOA) { DRV_GPIOA_PCLK_EN(); }
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a43      	ldr	r2, [pc, #268]	; (8000340 <GPIO_PCLKControl+0x124>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d106      	bne.n	8000244 <GPIO_PCLKControl+0x28>
 8000236:	4b43      	ldr	r3, [pc, #268]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023a:	4a42      	ldr	r2, [pc, #264]	; (8000344 <GPIO_PCLKControl+0x128>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == DRV_GPIOC) { DRV_GPIOC_PCLK_DI(); }
		else if (pGPIOx == DRV_GPIOD) { DRV_GPIOD_PCLK_DI(); }
		else if (pGPIOx == DRV_GPIOE) { DRV_GPIOE_PCLK_DI(); }
		else if (pGPIOx == DRV_GPIOH) { DRV_GPIOH_PCLK_DI(); }
	}
}
 8000242:	e077      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOB) { DRV_GPIOB_PCLK_EN(); }
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a40      	ldr	r2, [pc, #256]	; (8000348 <GPIO_PCLKControl+0x12c>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d106      	bne.n	800025a <GPIO_PCLKControl+0x3e>
 800024c:	4b3d      	ldr	r3, [pc, #244]	; (8000344 <GPIO_PCLKControl+0x128>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a3c      	ldr	r2, [pc, #240]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000258:	e06c      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOC) { DRV_GPIOC_PCLK_EN(); }
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a3b      	ldr	r2, [pc, #236]	; (800034c <GPIO_PCLKControl+0x130>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d106      	bne.n	8000270 <GPIO_PCLKControl+0x54>
 8000262:	4b38      	ldr	r3, [pc, #224]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a37      	ldr	r2, [pc, #220]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026e:	e061      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOD) { DRV_GPIOD_PCLK_EN(); }
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a37      	ldr	r2, [pc, #220]	; (8000350 <GPIO_PCLKControl+0x134>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d106      	bne.n	8000286 <GPIO_PCLKControl+0x6a>
 8000278:	4b32      	ldr	r3, [pc, #200]	; (8000344 <GPIO_PCLKControl+0x128>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a31      	ldr	r2, [pc, #196]	; (8000344 <GPIO_PCLKControl+0x128>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000284:	e056      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOE) { DRV_GPIOE_PCLK_EN(); }
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a32      	ldr	r2, [pc, #200]	; (8000354 <GPIO_PCLKControl+0x138>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d106      	bne.n	800029c <GPIO_PCLKControl+0x80>
 800028e:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000292:	4a2c      	ldr	r2, [pc, #176]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000294:	f043 0310 	orr.w	r3, r3, #16
 8000298:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029a:	e04b      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOH) { DRV_GPIOH_PCLK_EN(); }
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a2e      	ldr	r2, [pc, #184]	; (8000358 <GPIO_PCLKControl+0x13c>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d147      	bne.n	8000334 <GPIO_PCLKControl+0x118>
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a26      	ldr	r2, [pc, #152]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b0:	e040      	b.n	8000334 <GPIO_PCLKControl+0x118>
		if (pGPIOx == DRV_GPIOA) { DRV_GPIOA_PCLK_DI(); }
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a22      	ldr	r2, [pc, #136]	; (8000340 <GPIO_PCLKControl+0x124>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PCLKControl+0xac>
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a21      	ldr	r2, [pc, #132]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002c0:	f023 0301 	bic.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c6:	e035      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOB) { DRV_GPIOB_PCLK_DI(); }
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a1f      	ldr	r2, [pc, #124]	; (8000348 <GPIO_PCLKControl+0x12c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PCLKControl+0xc2>
 80002d0:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002d6:	f023 0302 	bic.w	r3, r3, #2
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e02a      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOC) { DRV_GPIOC_PCLK_DI(); }
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	; (800034c <GPIO_PCLKControl+0x130>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PCLKControl+0xd8>
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a16      	ldr	r2, [pc, #88]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002ec:	f023 0304 	bic.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e01f      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOD) { DRV_GPIOD_PCLK_DI(); }
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a16      	ldr	r2, [pc, #88]	; (8000350 <GPIO_PCLKControl+0x134>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PCLKControl+0xee>
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <GPIO_PCLKControl+0x128>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a10      	ldr	r2, [pc, #64]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000302:	f023 0308 	bic.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e014      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOE) { DRV_GPIOE_PCLK_DI(); }
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <GPIO_PCLKControl+0x138>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PCLKControl+0x104>
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <GPIO_PCLKControl+0x128>)
 8000318:	f023 0310 	bic.w	r3, r3, #16
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e009      	b.n	8000334 <GPIO_PCLKControl+0x118>
		else if (pGPIOx == DRV_GPIOH) { DRV_GPIOH_PCLK_DI(); }
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <GPIO_PCLKControl+0x13c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d105      	bne.n	8000334 <GPIO_PCLKControl+0x118>
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <GPIO_PCLKControl+0x128>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <GPIO_PCLKControl+0x128>)
 800032e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40020000 	.word	0x40020000
 8000344:	40023800 	.word	0x40023800
 8000348:	40020400 	.word	0x40020400
 800034c:	40020800 	.word	0x40020800
 8000350:	40020c00 	.word	0x40020c00
 8000354:	40021000 	.word	0x40021000
 8000358:	40021c00 	.word	0x40021c00

0800035c <GPIO_Init>:
 * RETURN			:	NONE
 *
 * NOTE				:	N/A
 ********************************************************************/
void GPIO_Init(GPIO_Handle_t *  pGPIOHandle)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	// 0. Initiate the GPIO BUS
	GPIO_PCLKControl(pGPIOHandle->pGPIOx, ENABLE);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2101      	movs	r1, #1
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff56 	bl	800021c <GPIO_PCLKControl>

	uint32_t temp = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	// 1. Configure the GPIO Mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d821      	bhi.n	80003c0 <GPIO_Init+0x64>
		// Non-interrupt mode setup
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	4619      	mov	r1, r3
 800039a:	2303      	movs	r3, #3
 800039c:	408b      	lsls	r3, r1
 800039e:	43db      	mvns	r3, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	400a      	ands	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	6819      	ldr	r1, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	430a      	orrs	r2, r1
 80003b8:	601a      	str	r2, [r3, #0]
		temp = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	e0cb      	b.n	8000558 <GPIO_Init+0x1fc>
	} else {
		// Interrupt mode setp
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	d117      	bne.n	80003f8 <GPIO_Init+0x9c>
			// Configure the falling trigger register
			DRV_EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c8:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <GPIO_Init+0x17c>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	7912      	ldrb	r2, [r2, #4]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a3f      	ldr	r2, [pc, #252]	; (80004d8 <GPIO_Init+0x17c>)
 80003da:	430b      	orrs	r3, r1
 80003dc:	60d3      	str	r3, [r2, #12]

			// Clear the corresponding RTSR bit just in case it was enabled
			DRV_EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003de:	4b3e      	ldr	r3, [pc, #248]	; (80004d8 <GPIO_Init+0x17c>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	7912      	ldrb	r2, [r2, #4]
 80003e6:	4611      	mov	r1, r2
 80003e8:	2201      	movs	r2, #1
 80003ea:	408a      	lsls	r2, r1
 80003ec:	43d2      	mvns	r2, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <GPIO_Init+0x17c>)
 80003f2:	400b      	ands	r3, r1
 80003f4:	6093      	str	r3, [r2, #8]
 80003f6:	e035      	b.n	8000464 <GPIO_Init+0x108>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	2b05      	cmp	r3, #5
 80003fe:	d117      	bne.n	8000430 <GPIO_Init+0xd4>
			// Configure the rising trigger register
			DRV_EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000400:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <GPIO_Init+0x17c>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	7912      	ldrb	r2, [r2, #4]
 8000408:	4611      	mov	r1, r2
 800040a:	2201      	movs	r2, #1
 800040c:	408a      	lsls	r2, r1
 800040e:	4611      	mov	r1, r2
 8000410:	4a31      	ldr	r2, [pc, #196]	; (80004d8 <GPIO_Init+0x17c>)
 8000412:	430b      	orrs	r3, r1
 8000414:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit just in case it was enabled
			DRV_EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <GPIO_Init+0x17c>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7912      	ldrb	r2, [r2, #4]
 800041e:	4611      	mov	r1, r2
 8000420:	2201      	movs	r2, #1
 8000422:	408a      	lsls	r2, r1
 8000424:	43d2      	mvns	r2, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <GPIO_Init+0x17c>)
 800042a:	400b      	ands	r3, r1
 800042c:	60d3      	str	r3, [r2, #12]
 800042e:	e019      	b.n	8000464 <GPIO_Init+0x108>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	2b06      	cmp	r3, #6
 8000436:	d115      	bne.n	8000464 <GPIO_Init+0x108>
			// Configure the rising and falling trigger register
			DRV_EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <GPIO_Init+0x17c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a23      	ldr	r2, [pc, #140]	; (80004d8 <GPIO_Init+0x17c>)
 800044a:	430b      	orrs	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
			DRV_EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <GPIO_Init+0x17c>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	7912      	ldrb	r2, [r2, #4]
 8000456:	4611      	mov	r1, r2
 8000458:	2201      	movs	r2, #1
 800045a:	408a      	lsls	r2, r1
 800045c:	4611      	mov	r1, r2
 800045e:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <GPIO_Init+0x17c>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port selection on SYSCFG_EXTICR register
		uint8_t t1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / EXTI_REG_BITS);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	089b      	lsrs	r3, r3, #2
 800046a:	74fb      	strb	r3, [r7, #19]
		uint8_t t2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % EXTI_REG_BITS);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	f003 0303 	and.w	r3, r3, #3
 8000474:	74bb      	strb	r3, [r7, #18]

		DRV_SYSCFG_PCLK_EN();
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <GPIO_Init+0x180>)
 8000478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047a:	4a18      	ldr	r2, [pc, #96]	; (80004dc <GPIO_Init+0x180>)
 800047c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000480:	6453      	str	r3, [r2, #68]	; 0x44

		// Get port with macro function:
		uint8_t portcode = GPIO_PORT_CODE(pGPIOHandle->pGPIOx);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <GPIO_Init+0x184>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d035      	beq.n	80004f8 <GPIO_Init+0x19c>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <GPIO_Init+0x188>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d01d      	beq.n	80004d2 <GPIO_Init+0x176>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <GPIO_Init+0x18c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d016      	beq.n	80004ce <GPIO_Init+0x172>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <GPIO_Init+0x190>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d00f      	beq.n	80004ca <GPIO_Init+0x16e>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <GPIO_Init+0x194>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d008      	beq.n	80004c6 <GPIO_Init+0x16a>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <GPIO_Init+0x198>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d101      	bne.n	80004c2 <GPIO_Init+0x166>
 80004be:	2307      	movs	r3, #7
 80004c0:	e01b      	b.n	80004fa <GPIO_Init+0x19e>
 80004c2:	2300      	movs	r3, #0
 80004c4:	e019      	b.n	80004fa <GPIO_Init+0x19e>
 80004c6:	2304      	movs	r3, #4
 80004c8:	e017      	b.n	80004fa <GPIO_Init+0x19e>
 80004ca:	2303      	movs	r3, #3
 80004cc:	e015      	b.n	80004fa <GPIO_Init+0x19e>
 80004ce:	2302      	movs	r3, #2
 80004d0:	e013      	b.n	80004fa <GPIO_Init+0x19e>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e011      	b.n	80004fa <GPIO_Init+0x19e>
 80004d6:	bf00      	nop
 80004d8:	40013c00 	.word	0x40013c00
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40020400 	.word	0x40020400
 80004e8:	40020800 	.word	0x40020800
 80004ec:	40020c00 	.word	0x40020c00
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40021c00 	.word	0x40021c00
 80004f8:	2300      	movs	r3, #0
 80004fa:	747b      	strb	r3, [r7, #17]
		DRV_SYSCFG->EXTICR[t1] &= ~(0xF << (t2 * EXTI_REG_BITS));
 80004fc:	4a66      	ldr	r2, [pc, #408]	; (8000698 <GPIO_Init+0x33c>)
 80004fe:	7cfb      	ldrb	r3, [r7, #19]
 8000500:	3302      	adds	r3, #2
 8000502:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000506:	7cbb      	ldrb	r3, [r7, #18]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	210f      	movs	r1, #15
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	43db      	mvns	r3, r3
 8000512:	4618      	mov	r0, r3
 8000514:	4960      	ldr	r1, [pc, #384]	; (8000698 <GPIO_Init+0x33c>)
 8000516:	7cfb      	ldrb	r3, [r7, #19]
 8000518:	4002      	ands	r2, r0
 800051a:	3302      	adds	r3, #2
 800051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		DRV_SYSCFG->EXTICR[t1] |= (portcode << (t2 * EXTI_REG_BITS));
 8000520:	4a5d      	ldr	r2, [pc, #372]	; (8000698 <GPIO_Init+0x33c>)
 8000522:	7cfb      	ldrb	r3, [r7, #19]
 8000524:	3302      	adds	r3, #2
 8000526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052a:	7c79      	ldrb	r1, [r7, #17]
 800052c:	7cbb      	ldrb	r3, [r7, #18]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4618      	mov	r0, r3
 8000536:	4958      	ldr	r1, [pc, #352]	; (8000698 <GPIO_Init+0x33c>)
 8000538:	7cfb      	ldrb	r3, [r7, #19]
 800053a:	4302      	orrs	r2, r0
 800053c:	3302      	adds	r3, #2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//			DRV_SYSCFG->EXTICR[t1] &= ~(0xF << (t2 * EXTI_REG_BITS));
//			DRV_SYSCFG->EXTICR[t1] |= (EXTI_PH << (t2 * EXTI_REG_BITS));
//		}

		// Enable the EXTI interrupt delivery using IMR
		DRV_EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b56      	ldr	r3, [pc, #344]	; (800069c <GPIO_Init+0x340>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a52      	ldr	r2, [pc, #328]	; (800069c <GPIO_Init+0x340>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure GPIO Speed
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	799b      	ldrb	r3, [r3, #6]
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	2303      	movs	r3, #3
 8000578:	408b      	lsls	r3, r1
 800057a:	43db      	mvns	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	400a      	ands	r2, r1
 8000584:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6899      	ldr	r1, [r3, #8]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	430a      	orrs	r2, r1
 8000594:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]

	// 3. Configure PUPDR
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	79db      	ldrb	r3, [r3, #7]
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68da      	ldr	r2, [r3, #12]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	4619      	mov	r1, r3
 80005b8:	2303      	movs	r3, #3
 80005ba:	408b      	lsls	r3, r1
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68d9      	ldr	r1, [r3, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

	// 4. Configure output type
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	4619      	mov	r1, r3
 80005f8:	2301      	movs	r3, #1
 80005fa:	408b      	lsls	r3, r1
 80005fc:	43db      	mvns	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	400a      	ands	r2, r1
 8000606:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6859      	ldr	r1, [r3, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	430a      	orrs	r2, r1
 8000616:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate functionality, if mode == alternate function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d134      	bne.n	800068e <GPIO_Init+0x332>
		uint8_t t1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / AF_REG_NO;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	743b      	strb	r3, [r7, #16]
		uint8_t t2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % AF_REG_NO;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	f003 0307 	and.w	r3, r3, #7
 8000634:	73fb      	strb	r3, [r7, #15]
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode) << (AF_REG_BITS * t2));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	461a      	mov	r2, r3
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[t1] &= ~(0xF << (AF_REG_BITS * t2));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7c3a      	ldrb	r2, [r7, #16]
 800064c:	3208      	adds	r2, #8
 800064e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	220f      	movs	r2, #15
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	43db      	mvns	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	7c3a      	ldrb	r2, [r7, #16]
 8000666:	4001      	ands	r1, r0
 8000668:	3208      	adds	r2, #8
 800066a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[t1] |= temp;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	7c3a      	ldrb	r2, [r7, #16]
 8000674:	3208      	adds	r2, #8
 8000676:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	7c3a      	ldrb	r2, [r7, #16]
 8000680:	6979      	ldr	r1, [r7, #20]
 8000682:	4301      	orrs	r1, r0
 8000684:	3208      	adds	r2, #8
 8000686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
	}
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40013800 	.word	0x40013800
 800069c:	40013c00 	.word	0x40013c00

080006a0 <GPIO_ReadFromInputPin>:
	else if (pGPIOx == DRV_GPIOH) {	GPIOH_REG_RESET(); }
}

// Data Read/Write
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x01);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	691a      	ldr	r2, [r3, #16]
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	fa22 f303 	lsr.w	r3, r2, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
	return value;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <I2C_PeriClockControl>:
 */

#include <stm32f4xx_I2C_Driver.h>

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d120      	bne.n	8000720 <I2C_PeriClockControl+0x54>
		if (pI2Cx == DRV_I2C1) { DRV_I2C1_PCLK_EN(); }
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <I2C_PeriClockControl+0xa0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <I2C_PeriClockControl+0x28>
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <I2C_PeriClockControl+0xa4>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a21      	ldr	r2, [pc, #132]	; (8000770 <I2C_PeriClockControl+0xa4>)
 80006ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
		if (pI2Cx == DRV_I2C1) { DRV_I2C1_PCLK_DI(); }
		else if (pI2Cx == DRV_I2C2) { DRV_I2C2_PCLK_DI(); }
		else if (pI2Cx == DRV_I2C3) { DRV_I2C3_PCLK_DI(); }
	}
}
 80006f2:	e035      	b.n	8000760 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == DRV_I2C2) { DRV_I2C2_PCLK_EN(); }
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <I2C_PeriClockControl+0xa8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <I2C_PeriClockControl+0x3e>
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <I2C_PeriClockControl+0xa4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <I2C_PeriClockControl+0xa4>)
 8000702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000708:	e02a      	b.n	8000760 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == DRV_I2C3) { DRV_I2C3_PCLK_EN(); }
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <I2C_PeriClockControl+0xac>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d126      	bne.n	8000760 <I2C_PeriClockControl+0x94>
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <I2C_PeriClockControl+0xa4>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <I2C_PeriClockControl+0xa4>)
 8000718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800071e:	e01f      	b.n	8000760 <I2C_PeriClockControl+0x94>
		if (pI2Cx == DRV_I2C1) { DRV_I2C1_PCLK_DI(); }
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <I2C_PeriClockControl+0xa0>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <I2C_PeriClockControl+0x6a>
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <I2C_PeriClockControl+0xa4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a10      	ldr	r2, [pc, #64]	; (8000770 <I2C_PeriClockControl+0xa4>)
 800072e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000734:	e014      	b.n	8000760 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == DRV_I2C2) { DRV_I2C2_PCLK_DI(); }
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <I2C_PeriClockControl+0xa8>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <I2C_PeriClockControl+0x80>
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <I2C_PeriClockControl+0xa4>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <I2C_PeriClockControl+0xa4>)
 8000744:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
}
 800074a:	e009      	b.n	8000760 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == DRV_I2C3) { DRV_I2C3_PCLK_DI(); }
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <I2C_PeriClockControl+0xac>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d105      	bne.n	8000760 <I2C_PeriClockControl+0x94>
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <I2C_PeriClockControl+0xa4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <I2C_PeriClockControl+0xa4>)
 800075a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40005400 	.word	0x40005400
 8000770:	40023800 	.word	0x40023800
 8000774:	40005800 	.word	0x40005800
 8000778:	40005c00 	.word	0x40005c00

0800077c <I2C_Init>:


// Init and Deinit

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
	uint16_t CCRValue = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	817b      	strh	r3, [r7, #10]

	// Enable peripheral clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2101      	movs	r1, #1
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff9a 	bl	80006cc <I2C_PeriClockControl>

	// Configure FREQ field of CR2
	tempreg = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U);
 800079c:	f000 f92c 	bl	80009f8 <RCC_GetPCLK1Value>
 80007a0:	4602      	mov	r2, r0
 80007a2:	4b4e      	ldr	r3, [pc, #312]	; (80008dc <I2C_Init+0x160>)
 80007a4:	fba3 2302 	umull	r2, r3, r3, r2
 80007a8:	0c9b      	lsrs	r3, r3, #18
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007ba:	605a      	str	r2, [r3, #4]

	// Program device's own address
	tempreg = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
	tempreg |= 1 << 14;			// To comply with keeping the 14th bit 1 always
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = (tempreg);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	tempreg = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCLSPEED_SM) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	4a3e      	ldr	r2, [pc, #248]	; (80008e0 <I2C_Init+0x164>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d80f      	bhi.n	800080c <I2C_Init+0x90>
		// Standard mode selected
		CCRValue = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80007ec:	f000 f904 	bl	80009f8 <RCC_GetPCLK1Value>
 80007f0:	4602      	mov	r2, r0
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fc:	817b      	strh	r3, [r7, #10]
		tempreg |= (CCRValue & 0xFFF);
 80007fe:	897b      	ldrh	r3, [r7, #10]
 8000800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4313      	orrs	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e02d      	b.n	8000868 <I2C_Init+0xec>
	} else {
		// Fast mode is selected
		tempreg |= (1 << 15);		// Enable Fast Mode
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000812:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);		// Configure duty cycle
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a9b      	ldrb	r3, [r3, #10]
 8000818:	039b      	lsls	r3, r3, #14
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4313      	orrs	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
		if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FMDUTY_2) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a9b      	ldrb	r3, [r3, #10]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10b      	bne.n	8000842 <I2C_Init+0xc6>
			CCRValue = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800082a:	f000 f8e5 	bl	80009f8 <RCC_GetPCLK1Value>
 800082e:	4601      	mov	r1, r0
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	fbb1 f3f3 	udiv	r3, r1, r3
 800083e:	817b      	strh	r3, [r7, #10]
 8000840:	e00c      	b.n	800085c <I2C_Init+0xe0>
		} else {
			CCRValue = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000842:	f000 f8d9 	bl	80009f8 <RCC_GetPCLK1Value>
 8000846:	4601      	mov	r1, r0
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	009a      	lsls	r2, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	fbb1 f3f3 	udiv	r3, r1, r3
 800085a:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (CCRValue & 0xFFF);
 800085c:	897b      	ldrh	r3, [r7, #10]
 800085e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	69d9      	ldr	r1, [r3, #28]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	430a      	orrs	r2, r1
 8000876:	61da      	str	r2, [r3, #28]

	tempreg = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]

	// Configure TRISE
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCLSPEED_SM) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <I2C_Init+0x164>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d809      	bhi.n	800089a <I2C_Init+0x11e>
		// Standard Mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000886:	f000 f8b7 	bl	80009f8 <RCC_GetPCLK1Value>
 800088a:	4602      	mov	r2, r0
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <I2C_Init+0x160>)
 800088e:	fba3 2302 	umull	r2, r3, r3, r2
 8000892:	0c9b      	lsrs	r3, r3, #18
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e00d      	b.n	80008b6 <I2C_Init+0x13a>
	} else {
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 800089a:	f000 f8ad 	bl	80009f8 <RCC_GetPCLK1Value>
 800089e:	4602      	mov	r2, r0
 80008a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008a4:	fb03 f302 	mul.w	r3, r3, r2
 80008a8:	0a5b      	lsrs	r3, r3, #9
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <I2C_Init+0x168>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	09db      	lsrs	r3, r3, #7
 80008b2:	3301      	adds	r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = 0;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6a19      	ldr	r1, [r3, #32]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	621a      	str	r2, [r3, #32]

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	431bde83 	.word	0x431bde83
 80008e0:	000186a0 	.word	0x000186a0
 80008e4:	00044b83 	.word	0x00044b83

080008e8 <I2C_MasterSendData>:
}


// Send & Receive Data
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTXBuffer, uint8_t len, uint8_t SlaveAddr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	4613      	mov	r3, r2
 80008fc:	71bb      	strb	r3, [r7, #6]
	// 1. Generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f8fa 	bl	8000afc <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is complete by checking the SB flag in SR1
	while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000908:	bf00      	nop
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2101      	movs	r1, #1
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f903 	bl	8000b1c <I2C_GetFlagStatus>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f6      	beq.n	800090a <I2C_MasterSendData+0x22>

	// 3. Send address of the slave with r/rw bit set to 0
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f90d 	bl	8000b44 <I2C_ExecuteAddressPhase>
//
//	// 5. Clear the ADDR flag
//	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);

	// 6. Send the data until len == 0 (after checking if DR is empty by checking TXE flag
	while (len > 0) {
 800092a:	e014      	b.n	8000956 <I2C_MasterSendData+0x6e>
		while (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));	// Wait till TXE is set
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f8f1 	bl	8000b1c <I2C_GetFlagStatus>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f6      	bne.n	800092e <I2C_MasterSendData+0x46>
		pI2CHandle->pI2Cx->DR = *pTXBuffer;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	611a      	str	r2, [r3, #16]
		pTXBuffer++;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3301      	adds	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
		len--;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3b01      	subs	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
	while (len > 0) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1e7      	bne.n	800092c <I2C_MasterSendData+0x44>
	}

	// 7. Wait until TXE == 1 and BTF == 1 before generating the stop condition
	while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 800095c:	bf00      	nop
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f8d9 	bl	8000b1c <I2C_GetFlagStatus>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f6      	beq.n	800095e <I2C_MasterSendData+0x76>
	while (!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)));
 8000970:	bf00      	nop
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2104      	movs	r1, #4
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f8cf 	bl	8000b1c <I2C_GetFlagStatus>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f6      	beq.n	8000972 <I2C_MasterSendData+0x8a>

	// 8. Generate the stop condtion
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f8f1 	bl	8000b70 <I2C_GenerateStopCondition>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <I2C_PeripheralControl>:

// Other peripheral control
void I2C_PeripheralControl(I2C_Handle_t *pI2CHandle, uint8_t EnorDi)
{
 8000996:	b480      	push	{r7}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	70fb      	strb	r3, [r7, #3]
	uint32_t tempreg = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]

	if (EnorDi == ENABLE) { pI2CHandle->pI2Cx->CR1 |= ENABLE_PE; }
 80009a6:	78fb      	ldrb	r3, [r7, #3]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d108      	bne.n	80009be <I2C_PeripheralControl+0x28>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e007      	b.n	80009ce <I2C_PeripheralControl+0x38>
	else { pI2CHandle->pI2Cx->CR1 &= DISABLE_PE; }
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0201 	bic.w	r2, r2, #1
 80009cc:	601a      	str	r2, [r3, #0]

	// Enable ACKing
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7a5b      	ldrb	r3, [r3, #9]
 80009d2:	029b      	lsls	r3, r3, #10
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->CR1 |= tempreg;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <RCC_GetPCLK1Value>:
 * value of APB bus speed. We can start off with something, but during multiple
 * other applications, the value of APB Bus speed may change. This function gives
 * the most recent value of APB Bus. Configure it using the clock tree.
 */
uint32_t RCC_GetPCLK1Value(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08d      	sub	sp, #52	; 0x34
 80009fc:	af00      	add	r7, sp, #0
	uint8_t ClckSrc;
	uint32_t SystemClc;

	uint8_t AHBPrescalerVal;
	uint32_t AHBPrescalerFactor;
	uint16_t AHBPreArr[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <RCC_GetPCLK1Value+0xd8>)
 8000a00:	f107 040c 	add.w	r4, r7, #12
 8000a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t APB1PrescalerVal;
	uint32_t APB1PrescalerFactor;
	uint16_t APBPreArr[4] = {2, 4, 8, 16};
 8000a0a:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <RCC_GetPCLK1Value+0xdc>)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a12:	e883 0003 	stmia.w	r3, {r0, r1}

	// We are only concerned about bit 2 and 3. We need to bring bit 2 and 3 to
	// position 0 and 1. In order to do that, we have to shift the value in CFGR
	// by 2. Then if we mask it by 0b11, we'll get the first 2 bits.
	ClckSrc = ((DRV_RCC->CFGR >> 2) & 0x3);
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <RCC_GetPCLK1Value+0xe0>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ClckSrc == 0) {
 8000a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <RCC_GetPCLK1Value+0x3c>
		// System clock is HSI
		SystemClc = 16000000;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <RCC_GetPCLK1Value+0xe4>)
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	e00d      	b.n	8000a50 <RCC_GetPCLK1Value+0x58>
	} else if (ClckSrc == 1) {
 8000a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d102      	bne.n	8000a42 <RCC_GetPCLK1Value+0x4a>
		// System clock is HSE
		SystemClc = 8000000;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <RCC_GetPCLK1Value+0xe8>)
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a40:	e006      	b.n	8000a50 <RCC_GetPCLK1Value+0x58>
	} else if (ClckSrc == 2) {
 8000a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d102      	bne.n	8000a50 <RCC_GetPCLK1Value+0x58>
		// System clocks is PL
		SystemClc = RCC_GetPLLOutputClock();
 8000a4a:	f000 f84b 	bl	8000ae4 <RCC_GetPLLOutputClock>
 8000a4e:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// Get the value of AHB prescaler
	AHBPrescalerVal = ((DRV_RCC->CFGR >> 4) & 0xF);
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <RCC_GetPCLK1Value+0xe0>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (AHBPrescalerVal < 8) {
 8000a60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d802      	bhi.n	8000a6e <RCC_GetPCLK1Value+0x76>
		// System clock is not divided
		AHBPrescalerFactor = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e009      	b.n	8000a82 <RCC_GetPCLK1Value+0x8a>
	} else {
		AHBPrescalerFactor = AHBPreArr[AHBPrescalerVal - 8];
 8000a6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a72:	3b08      	subs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Get the value of APB prescaler
	APB1PrescalerVal = ((DRV_RCC->CFGR >> 10) & 0x7);
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <RCC_GetPCLK1Value+0xe0>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	0a9b      	lsrs	r3, r3, #10
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (APB1PrescalerVal < 4) {
 8000a92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d802      	bhi.n	8000aa0 <RCC_GetPCLK1Value+0xa8>
		// APB is not divided
		APB1PrescalerFactor = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9e:	e009      	b.n	8000ab4 <RCC_GetPCLK1Value+0xbc>
	} else {
		APB1PrescalerFactor = APBPreArr[APB1PrescalerVal - 4];
 8000aa0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000aac:	4413      	add	r3, r2
 8000aae:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	PClk1 = ((SystemClc / AHBPrescalerFactor) / APB1PrescalerFactor);
 8000ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	61fb      	str	r3, [r7, #28]

	return PClk1;
 8000ac4:	69fb      	ldr	r3, [r7, #28]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3734      	adds	r7, #52	; 0x34
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08000d58 	.word	0x08000d58
 8000ad4:	08000d68 	.word	0x08000d68
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	00f42400 	.word	0x00f42400
 8000ae0:	007a1200 	.word	0x007a1200

08000ae4 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
	uint32_t PLLClock = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]

	return PLLClock;
 8000aee:	687b      	ldr	r3, [r7, #4]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & FlagName) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <I2C_ExecuteAddressPhase>:

void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;		// Shift by 1 bit for the last bit to hold
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	70fb      	strb	r3, [r7, #3]
									// R/W bit
	SlaveAddr &= ~(1);				// Clear the 0th bit
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	611a      	str	r2, [r3, #16]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <I2C_GenerateStopCondition>:
	dummyRead = pI2Cx->SR2;
	(void) dummyRead;
}

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <main>:
void I2C1_GPIOInits(void);
void GPIO_Button_Init(void);
void I2C1_Inits(void);

int main(void)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
	uint8_t data[] = "We are testing some I2C Master Tx.\n";
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <main+0x5c>)
 8000b98:	1d3c      	adds	r4, r7, #4
 8000b9a:	461d      	mov	r5, r3
 8000b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	6023      	str	r3, [r4, #0]

	I2C1_GPIOInits();
 8000ba8:	f000 f826 	bl	8000bf8 <I2C1_GPIOInits>
	I2C1_Inits();
 8000bac:	f000 f85e 	bl	8000c6c <I2C1_Inits>
	GPIO_Button_Init();
 8000bb0:	f000 f844 	bl	8000c3c <GPIO_Button_Init>
	I2C_PeripheralControl(&I2CHandle, ENABLE);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <main+0x60>)
 8000bb8:	f7ff feed 	bl	8000996 <I2C_PeripheralControl>

	// Wait for button press
	while (1) {
		while (!(GPIO_ReadFromInputPin(DRV_GPIOC, GPIO_PIN_NO_13))) {
 8000bbc:	e00d      	b.n	8000bda <main+0x4a>
			delay(3);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f7ff fb12 	bl	80001e8 <delay>
			// Send some data to the slave
			I2C_MasterSendData(&I2CHandle, data, strlen((char *) data), SLAVE_ADDRESS);
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb06 	bl	80001d8 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	1d39      	adds	r1, r7, #4
 8000bd2:	2368      	movs	r3, #104	; 0x68
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <main+0x60>)
 8000bd6:	f7ff fe87 	bl	80008e8 <I2C_MasterSendData>
		while (!(GPIO_ReadFromInputPin(DRV_GPIOC, GPIO_PIN_NO_13))) {
 8000bda:	210d      	movs	r1, #13
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <main+0x64>)
 8000bde:	f7ff fd5f 	bl	80006a0 <GPIO_ReadFromInputPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0ea      	beq.n	8000bbe <main+0x2e>
 8000be8:	e7f7      	b.n	8000bda <main+0x4a>
 8000bea:	bf00      	nop
 8000bec:	08000d70 	.word	0x08000d70
 8000bf0:	2000001c 	.word	0x2000001c
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <I2C1_GPIOInits>:
		}
	}
}

void I2C1_GPIOInits(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = DRV_GPIOB;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <I2C1_GPIOInits+0x40>)
 8000c00:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000c02:	2302      	movs	r3, #2
 8000c04:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTTYPE_OD;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PULLU;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c12:	2302      	movs	r3, #2
 8000c14:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000c16:	2306      	movs	r3, #6
 8000c18:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fb9d 	bl	800035c <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fb97 	bl	800035c <GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020400 	.word	0x40020400

08000c3c <GPIO_Button_Init>:

// Button GPIO Init
void GPIO_Button_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioButton;

	gpioButton.pGPIOx = DRV_GPIOC;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <GPIO_Button_Init+0x2c>)
 8000c44:	607b      	str	r3, [r7, #4]
	gpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000c46:	230d      	movs	r3, #13
 8000c48:	723b      	strb	r3, [r7, #8]
	gpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	727b      	strb	r3, [r7, #9]
	gpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	72bb      	strb	r3, [r7, #10]
	gpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOPUPD;
 8000c52:	2300      	movs	r3, #0
 8000c54:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&gpioButton);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fb7f 	bl	800035c <GPIO_Init>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020800 	.word	0x40020800

08000c6c <I2C1_Inits>:

// Peripheral configurations for I2C
void I2C1_Inits(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	I2CHandle.pI2Cx = DRV_I2C1;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <I2C1_Inits+0x2c>)
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <I2C1_Inits+0x30>)
 8000c74:	601a      	str	r2, [r3, #0]
	I2CHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <I2C1_Inits+0x2c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	725a      	strb	r2, [r3, #9]
	I2CHandle.I2C_Config.I2C_DeviceAddress = MY_STM_DEVICE_ADDRESS; 			// Since it's a master device, address doesn't matter
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <I2C1_Inits+0x2c>)
 8000c7e:	2268      	movs	r2, #104	; 0x68
 8000c80:	721a      	strb	r2, [r3, #8]
	I2CHandle.I2C_Config.I2C_FMDutyCycle = I2C_FMDUTY_2;						// This doesn't matter either since duty cycle is necessary only for fast mode
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <I2C1_Inits+0x2c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	729a      	strb	r2, [r3, #10]
	I2CHandle.I2C_Config.I2C_SCLSpeed = I2C_SCLSPEED_SM;						// 100khz
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <I2C1_Inits+0x2c>)
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <I2C1_Inits+0x34>)
 8000c8c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2CHandle);
 8000c8e:	4802      	ldr	r0, [pc, #8]	; (8000c98 <I2C1_Inits+0x2c>)
 8000c90:	f7ff fd74 	bl	800077c <I2C_Init>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000001c 	.word	0x2000001c
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	000186a0 	.word	0x000186a0

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ca8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f000 f811 	bl	8000cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff ff5b 	bl	8000b90 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ce8:	08000d9c 	.word	0x08000d9c
  ldr r2, =_sbss
 8000cec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cf0:	20000028 	.word	0x20000028

08000cf4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <__libc_init_array>:
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	4e0d      	ldr	r6, [pc, #52]	; (8000d30 <__libc_init_array+0x38>)
 8000cfc:	4c0d      	ldr	r4, [pc, #52]	; (8000d34 <__libc_init_array+0x3c>)
 8000cfe:	1ba4      	subs	r4, r4, r6
 8000d00:	10a4      	asrs	r4, r4, #2
 8000d02:	2500      	movs	r5, #0
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	d109      	bne.n	8000d1c <__libc_init_array+0x24>
 8000d08:	4e0b      	ldr	r6, [pc, #44]	; (8000d38 <__libc_init_array+0x40>)
 8000d0a:	4c0c      	ldr	r4, [pc, #48]	; (8000d3c <__libc_init_array+0x44>)
 8000d0c:	f000 f818 	bl	8000d40 <_init>
 8000d10:	1ba4      	subs	r4, r4, r6
 8000d12:	10a4      	asrs	r4, r4, #2
 8000d14:	2500      	movs	r5, #0
 8000d16:	42a5      	cmp	r5, r4
 8000d18:	d105      	bne.n	8000d26 <__libc_init_array+0x2e>
 8000d1a:	bd70      	pop	{r4, r5, r6, pc}
 8000d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d20:	4798      	blx	r3
 8000d22:	3501      	adds	r5, #1
 8000d24:	e7ee      	b.n	8000d04 <__libc_init_array+0xc>
 8000d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d2a:	4798      	blx	r3
 8000d2c:	3501      	adds	r5, #1
 8000d2e:	e7f2      	b.n	8000d16 <__libc_init_array+0x1e>
 8000d30:	08000d94 	.word	0x08000d94
 8000d34:	08000d94 	.word	0x08000d94
 8000d38:	08000d94 	.word	0x08000d94
 8000d3c:	08000d98 	.word	0x08000d98

08000d40 <_init>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	bf00      	nop
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr

08000d4c <_fini>:
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	bf00      	nop
 8000d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d52:	bc08      	pop	{r3}
 8000d54:	469e      	mov	lr, r3
 8000d56:	4770      	bx	lr
